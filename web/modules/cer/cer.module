<?php

use Drupal\cer\Plugin\Handlers\CerHandler;

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_help().
 */
function cer_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  $output = '';
  
  switch ($route_name) {
  case 'cer.admin':
    $output .= t('Check which entity references should listen to each other. When checking a check box a reference on entity type A to entity B will automatically update the entity reference field on entity B adding an entry which points to entity A.');
    break;
  case 'cer.update':
    $output .= t('This will update all the existing entities for the selected content types so that their entity reference fields are in sync.');
    $output .= '<br />';
    $output .= t('This process may take a long time depending on the number of entities you are updating.');
    $output .= '<br /><br />';
    $output .= t('When the process is finished you will see a count of the number of entities that were updated.');
    break;
  }

  return $output;
}

/**
 * Implements hook_field_purge_field_storage()
 */
function cer_field_purge_field_storage(\Drupal\field\Entity\FieldStorageConfig $field_storage) {
  $field_name = $field_storage->getName();

  foreach (cer_preset_load_enabled() as $row) {
    $keys = explode('*', $row);

    if ($keys[2] == $field_name || $keys[5] == $field_name) {
      cer_preset_delete($row);
    }
  }
}

/**
 * Implements hook_field_purge_field()
 */
function cer_field_purge_field(\Drupal\field\Entity\FieldConfig $field) {
  $entity_type = $field->getEntityType();
  $bundle = $field->bundle();
  $field_name = $field->getName();

  foreach (cer_preset_load_enabled() as $row) {
    $keys = explode('*', $row);

    if (($keys[0] == $entity_type && $keys[1] == $bundle && $keys[2] == $field_name) || ($keys[3] == $entity_type && $keys[4] == $bundle && $keys[5] == $field_name)) {
      cer_preset_delete($row);
    }
  }
}

function _cer_label($key) {
  $key = explode(' ', $key);
  
  $local = \Drupal::getContainer()
    ->get('entity_field.manager')
    ->getFieldDefinitions($key[0], $key[1])[$key[2]];

  $remote = \Drupal::getContainer()
    ->get('entity_field.manager')
    ->getFieldDefinitions($key[3], $key[4])[$key[5]];

  $message = 'Correspond <span title=":local_field">%local_label</span> on :local_entity(s) of type %local_bundle with <span title=":remote_field">%remote_label</span> on :remote_entity(s) of type %remote_bundle.';

  //dpm($key);
  $variables = array(
    '%local_label' => $local->getLabel(),
    ':local_field' => $local->getName(),
    ':local_entity' => $local->getTargetEntityTypeId(),
    '%local_bundle' => $local->getTargetBundle(),
    '%remote_label' => $remote->getLabel(),
    ':remote_field' => $remote->getName(),
    ':remote_entity' => $remote->getTargetEntityTypeId(),
    '%remote_bundle' => $remote->getTargetBundle()
  );

  return t($message, $variables)->render();
}

/**
 * Implements hook_entity_insert().
 */
function cer_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  cer_processing_entity('insert', $entity, $entity->getEntityTypeId());
}

/**
 * Implements hook_entity_update().
 */
function cer_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  cer_processing_entity('update', $entity, $entity->getEntityTypeId());
}

/**
 * Implements hook_entity_delete().
 */
function cer_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  cer_processing_entity('delete', $entity, $entity->getEntityTypeId());
}

/**
 * Load enabled CER presets.
 */
function cer_preset_load_enabled() {
  $enabled = array();
  $presets = \Drupal::config('cer.settings')->get('presets');
  foreach ($presets as $key => $is_enabled) {
    if ($is_enabled) $enabled[] = $key;
  }
  return $enabled;
}

/**
 * Return CER preset by key.
 */
function cer_preset_load($key) {
  $presets = \Drupal::config('cer.settings')->get('presets');

  if (isset($presets[$key])) {
    return [ 'preset' => $key, 'enabled' => $presets[$key] ];
  }

  return FALSE;
}

/**
 * Return 1 if CER preset specified by given key is enabled.
 */
function cer_preset_enabled($key) {
  $preset = cer_preset_load($key);
  return ($preset === FALSE) ? 0 : $preset['enabled'];
}

/**
 * Deletes or disables a given CER preset.
 */
function cer_preset_delete($key) {
  $config = \Drupal::configFactory()->getEditable('cer.settings');
  $presets = $config->get('presets');
  if (isset($presets[$key])) {
    unset($presets[$key]);
    $config->set('cer.settings', $presets)->save();
  }
}

/**
 * Process a entity's corresponding entity references.
 *
 * @param string $op 
 *  The operation being performed on the entity (insert, update, or delete).
 *
 * @param object $entity
 *  The entity or the entity's id.
 *
 * @param string $entity_type
 *  The entity type.
 *
 * @param array $context
 *  Either the Batch API context (since this is the callback function used
 *  during bulk update) or NULL if we're not in a batch job.
 */
function cer_processing_entity($op, $entity, $entity_type, &$context = NULL) {
  // Load the entity if we're given an ID rather than an entity.
  if (!is_object($entity)) {
    $entity = entity_load($entity_type, array($entity));
    $entity = reset($entity);
  }

  foreach (cer_preset_load_enabled() as $preset) {
    $keys = explode('*', $preset);

    if ($keys[0] == $entity_type && $keys[1] == $entity->bundle()) {
      try {
        $handler = new CerHandler($preset, $entity);
        call_user_func(array($handler, $op));
      }
      catch (CerException $e) {
        if (isset($context)) {
          $context['results']['errors'][] = $e;
        }
        else {
          throw $e;
        }
      }
    }

    if ($keys[3] == $entity_type && $keys[4] == $entity->bundle()) {
      $preset = implode('*', array($keys[3], $keys[4], $keys[5], $keys[0], $keys[1], $keys[2]));

      try {
        $handler = new CerHandler($preset, $entity);
        call_user_func(array($handler, $op));
      }
      catch (CerException $e) {
        if (isset($context)) {
          $context['results']['errors'][] = $e;
        }
        else {
          throw $e;
        }
      }
    }
  }

  if (isset($context)) {
    $context['results']['count']++;
  }
}

/**
 * Batch 'finished' callback.
 */
function cer_batch_update_existing_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural($results['count'], '1 entity processed.', '@count entities processed.');

    if (isset($results['errors'])) {
      $type = 'warning';
      foreach ($results['errors'] as $e) {
        drupal_set_message($e->getMessage(), 'error');
      }
    }
    else {
      $type = 'status';
    }
    drupal_set_message($message, $type);
  }
  else {
    // An error occurred. $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments:' . print_r($error_operation[0], TRUE);
    drupal_set_message($message, 'error');
  }
}

/**
 * Update field data.
 *
 * @param $node the referenced node to be updated.
 */
function _cer_update($entity_type, $entity) {
  $entity->save();
}
